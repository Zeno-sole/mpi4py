From cc6152334bb0cf6894fb37aea4702e2a2b1f205b Mon Sep 17 00:00:00 2001
From: Lisandro Dalcin <dalcinl@gmail.com>
Date: Tue, 14 Sep 2021 09:53:10 +0300
Subject: [PATCH 1/2] tox: Add NumPy to default testenv dependencies

---
 tox.ini | 1 +
 1 file changed, 1 insertion(+)

Index: mpi4py/src/mpi4py/util/dtlib.py
===================================================================
--- mpi4py.orig/src/mpi4py/util/dtlib.py	2021-09-14 12:11:06.725518788 +0200
+++ mpi4py/src/mpi4py/util/dtlib.py	2021-09-14 12:11:06.717518364 +0200
@@ -24,22 +24,67 @@
     return MPI._typecode(datatype)
 
 
+def _get_alignment_ctypes(typecode):
+    # pylint: disable=protected-access
+    # pylint: disable=import-outside-toplevel
+    import ctypes as ct
+    if typecode in ('p', 'n', 'P', 'N'):
+        kind = 'i' if typecode in ('p', 'n') else 'u'
+        size = ct.sizeof(ct.c_void_p)
+        typecode = '{}{:d}'.format(kind, size)
+    if typecode in ('F', 'D', 'G'):
+        typecode = typecode.lower()
+    if len(typecode) > 1:
+        mapping = {
+            'b': (ct.c_bool,),
+            'i': (ct.c_int8, ct.c_int16, ct.c_int32, ct.c_int64),
+            'u': (ct.c_uint8, ct.c_uint16, ct.c_uint32, ct.c_uint64),
+            'f': (ct.c_float, ct.c_double, ct.c_longdouble),
+        }
+        kind, size = typecode[0], int(typecode[1:])
+        if kind == 'c':
+            kind, size = 'f', size // 2
+        for c_type in mapping[kind]:
+            if ct.sizeof(c_type) == size:
+                typecode = c_type._type_
+    c_type_base = ct._SimpleCData
+    c_type = type('c_type', (c_type_base,), dict(_type_=typecode))
+    fields = [('base', ct.c_char), ('c_type', c_type)]
+    struct = type('S', (ct.Structure,), dict(_fields_=fields))
+    return struct.c_type.offset
+
+
+def _get_alignment(datatype):
+    typecode = _get_typecode(datatype)
+    if typecode is None:
+        combiner = datatype.combiner
+        combiner_f90 = (
+            MPI.COMBINER_F90_INTEGER,
+            MPI.COMBINER_F90_REAL,
+            MPI.COMBINER_F90_COMPLEX,
+        )
+        if combiner in combiner_f90:
+            typesize = datatype.Get_size()
+            typekind = 'ifc'[combiner_f90.index(combiner)]
+            typecode = '{0}{1:d}'.format(typekind, typesize)
+    if typecode is None:
+        # pylint: disable=import-outside-toplevel
+        from struct import calcsize
+        alignment = datatype.Get_size()
+        return min(max(1, alignment), calcsize('P'))
+    try:
+        return _np_dtype(typecode).alignment
+    except NameError:  # pragma: no cover
+        return _get_alignment_ctypes(typecode)
+
+
 def _is_aligned(datatype, offset=0):
     """Dermine whether an MPI datatype is aligned."""
     if datatype.is_predefined:
         if offset == 0:
             return True
-        typecode = _get_typecode(datatype)
-        combiner = datatype.combiner
-        is_complex = any((
-            typecode in ('F', 'D', 'G'),
-            typecode in ('c4', 'c8', 'c16', 'c32'),
-            combiner == MPI.COMBINER_F90_COMPLEX,
-        ))
-        typesize = datatype.Get_size() or 1
-        if is_complex:
-            typesize //= 2
-        return offset % typesize == 0
+        alignment = _get_alignment(datatype)
+        return offset % alignment == 0
 
     combiner = datatype.combiner
     basetype, _, info = datatype.decode()
Index: mpi4py/test/test_util_dtlib.py
===================================================================
--- mpi4py.orig/test/test_util_dtlib.py	2021-09-14 12:11:06.725518788 +0200
+++ mpi4py/test/test_util_dtlib.py	2021-09-14 12:11:06.717518364 +0200
@@ -35,7 +35,8 @@
     typecodes.remove('G')
 
 name, version = MPI.get_vendor()
-if (name == 'MPICH') and version < (4, 0, 0):
+mpich_lt_400 = (name == 'MPICH') and version < (4, 0, 0)
+if mpich_lt_400:
     typecodes = [t for t in typecodes if t not in 'FDG']
 
 datatypes = [MPI._typedict[t] for t in typecodes]
@@ -139,6 +140,16 @@
         mt1.Free()
         mt2.Free()
 
+    def makeStruct(self, dt, mt):
+        dt = numpy.dtype(dt).str
+        stp = numpy.dtype(",".join(['B', dt, 'B']), align=True)
+        off = lambda i: stp.fields[stp.names[i]][1]
+        blens = [1, 1, 1]
+        disps = [0, off(1), off(2)]
+        types = [MPI.BYTE, mt, MPI.BYTE]
+        mtp = MPI.Datatype.Create_struct(blens, disps, types)
+        return stp, mtp
+
     @unittest.skipMPI('msmpi')
     @unittest.skipIf(numpy is None, 'numpy')
     def testStruct4(self):
@@ -146,12 +157,8 @@
             with self.subTest(typecode=t):
                 dt0 = np_dtype(t)
                 mt0 = fromnumpy(dt0)
-                sz0 = mt0.Get_size()
-                blens = [1, 1,  1]
-                disps = [0, sz0, 2*sz0]
-                types = [MPI.BYTE, mt0, MPI.BYTE]
-                mt1 = MPI.Datatype.Create_struct(blens, disps, types)
-                ex1 = 2*sz0 + sz0 // (2 if t in 'FDG' else 1)
+                stp, mt1 = self.makeStruct(t, mt0)
+                ex1 = stp.itemsize
                 for n, mt in (
                     (1, mt1),
                     (1, mt1.Dup()),
@@ -274,6 +281,48 @@
                 mt2.Free()
 
     @unittest.skipMPI('msmpi')
+    def testF77(self):
+        mpif77types = [
+            MPI.CHARACTER,
+            #MPI.LOGICAL,
+            MPI.INTEGER,
+            MPI.REAL,
+            MPI.DOUBLE_PRECISION,
+            MPI.COMPLEX,
+            MPI.DOUBLE_COMPLEX,
+        ]
+        for mt in mpif77types:
+            if mt == MPI.DATATYPE_NULL:
+                continue
+            if mt.Get_size() == 0:
+                continue
+            dt = tonumpy(mt)
+            if np_dtype is not None:
+                self.assertEqual(dt.itemsize, mt.extent)
+
+    @unittest.skipMPI('msmpi')
+    def testF90(self):
+        mpif90types = (
+            MPI.INTEGER1,
+            MPI.INTEGER2,
+            MPI.INTEGER4,
+            MPI.INTEGER8,
+            MPI.INTEGER16,
+            MPI.REAL4,
+            MPI.REAL8,
+            MPI.COMPLEX8,
+            MPI.COMPLEX16,
+        )
+        for mt in mpif90types:
+            if mt == MPI.DATATYPE_NULL:
+                continue
+            if mt.Get_size() == 0:
+                continue
+            dt = tonumpy(mt)
+            if np_dtype is not None:
+                self.assertEqual(dt.itemsize, mt.extent)
+
+    @unittest.skipMPI('msmpi')
     def testF90Integer(self):
         try:
             mt = MPI.Datatype.Create_f90_integer(1)
@@ -288,6 +337,11 @@
                 if np_dtype is not None:
                     self.assertEqual(dt.kind, 'i')
                     self.assertEqual(dt.itemsize, mt.extent)
+                    tstr = 'i{}'.format(mt.Get_size())
+                    stp, mtp = self.makeStruct(tstr, mt)
+                    self.assertEqual(stp.itemsize, mtp.extent)
+                    self.check(mtp)
+                    mtp.Free()
 
     @unittest.skipMPI('msmpi')
     def testF90Real(self):
@@ -304,6 +358,11 @@
                 if np_dtype is not None:
                     self.assertEqual(dt.kind, 'f')
                     self.assertEqual(dt.itemsize, mt.extent)
+                    tstr = 'f{}'.format(mt.Get_size())
+                    stp, mtp = self.makeStruct(tstr, mt)
+                    self.assertEqual(stp.itemsize, mtp.extent)
+                    self.check(mtp)
+                    mtp.Free()
 
     @unittest.skipMPI('msmpi')
     def testF90Complex(self):
@@ -321,6 +380,29 @@
                     self.assertEqual(dt.kind, 'c')
                     self.assertEqual(dt.itemsize, mt.extent)
 
+    @unittest.skipMPI('msmpi')
+    def testCoverage(self):
+        from mpi4py.util import dtlib
+        mpitypes = (
+            MPI.LOGICAL,
+        )
+        for mt in mpitypes:
+            if mt == MPI.DATATYPE_NULL:
+                continue
+            if mt.Get_size() == 0:
+                continue
+            dtlib._get_alignment(mt)
+
+    def testAlignment(self):
+        from mpi4py.util import dtlib
+        complexcodes = ['c{}'.format(n) for n in (8, 16)]
+        for t in typecodes + complexcodes:
+            with self.subTest(typecode=t):
+                alignment1 = dtlib._get_alignment_ctypes(t)
+                if np_dtype is not None:
+                    alignment2 = numpy.dtype(t).alignment
+                    self.assertTrue(alignment1, alignment2)
+
     @unittest.skipIf(numpy is None, 'numpy')
     def testFailures(self):
         endian = '>' if np_dtype('<i').isnative else '<'
